theia {
  host = "0.0.0.0"
  host = ${?THEIA_HOST}

  port = "8080"
  port = ${?THEIA_PORT}

  basePath = "v1"
  basePath = ${?THEIA_BASE_PATH}
}

akka {
  my-blocking-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 16
    }
    throughput = 100
  }
}

akka {
  stream {
    # Default flow materializer settings
    materializer {
      debug-logging = on
    }

    default-blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      throughput = 100

      thread-pool-executor {
        core-pool-size-min = 2
        core-pool-size-factor = 2.0
        core-pool-size-max = 32
      }
    }
  }
}


akka.http {
  server {

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    idle-timeout = 20 s
    idle-timeout = ${?AKKA_IDLE_TIMEOUT}

    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # If this setting is not `infinite` the HTTP server layer attaches a
    # `Timeout-Access` header to the request, which enables programmatic
    # customization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 20 s
    request-timeout = ${?AKKA_REQUEST_TIMEOUT}

    # The maximum number of concurrently accepted connections when using the
    # `Http().bindAndHandle` methods.
    max-connections = 20480
    max-connections = ${?AKKA_MAX_CONNECTIONS}

    # The maximum number of requests that are accepted (and dispatched to
    # the application) on one single connection before the first request
    # has to be completed.
    # Incoming requests that would cause the pipelining limit to be exceeded
    # are not read from the connections socket so as to build up "back-pressure"
    # to the client via TCP flow control.
    # A setting of 1 disables HTTP pipelining, since only one request per
    # connection can be "open" (i.e. being processed by the application) at any
    # time. Set to higher values to enable HTTP pipelining.
    # This value must be > 0 and <= 1024.
    pipelining-limit = 16
    pipelining-limit = ${?AKKA_PIPELINING_LIMIT}

    # The requested maximum length of the queue of incoming connections.
    # If the server is busy and the backlog is full the OS will start dropping
    # SYN-packets and connection attempts may fail. Note, that the backlog
    # size is usually only a maximum size hint for the OS and the OS can
    # restrict the number further based on global limits.
    backlog = 100
    backlog = ${?AKKA_BACKLOG}


    # Enables/disables the addition of a `Raw-Request-URI` header holding the
    # original raw request URI as the client has sent it.
    raw-request-uri-header = on
    remote-address-header = on
  }
  parsing {
    illegal-header-warnings = on
  }
}